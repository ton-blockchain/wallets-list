worker_processes auto;
pid /var/run/nginx.pid;
error_log /dev/stdout info;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Define custom log format with cache status and remote URL
    log_format main_with_cache '$remote_addr - $remote_user [$time_local] "$request" '
                              '$status $body_bytes_sent "$http_referer" '
                              '"$http_user_agent" cache_status="$upstream_cache_status" '
                              'remote_url="$remote_image_url"';

    # Send access logs to stdout
    access_log /dev/stdout main_with_cache;

    resolver 192.168.65.7 valid=3s;
    resolver_timeout 1s;

    proxy_cache_path /var/cache/nginx/image_cache
                     levels=1:2
                     keys_zone=image_cache:10m
                     max_size=1g
                     inactive=60m
                     use_temp_path=off;

    map $request_uri $remote_image_url {
{% for filename, original_url in origins.items() %}
        "/{{ assets_prefix | default('assets') }}/{{ filename }}" "{{ original_url }}";
{% endfor %}
        "/{{ assets_prefix | default('assets') }}/.proxytest-dns.png" "https://notexists.forsure/picture.png";
        "/{{ assets_prefix | default('assets') }}/.proxytest-404.png" "http://localhost:80/thispictureismissing.png";
        default "";
    }

    server {
        listen 80;
        server_name {{ server_name | default('config.ton.org') }};

        # Serve wallets-v2.json from content root
        root /usr/share/nginx/html;
        index wallets-v2.json;

        # return 200 status code if origin URL failed
        error_page 500 502 503 504 401 402 403 404 =200 @serve_predownloaded;

        location /thispictureismissing.png {
            return 404;
        }

        location /{{ assets_prefix | default('assets') }}/ {
            if ($remote_image_url = "") {
                return 404;
            }

            proxy_pass $remote_image_url;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;

            proxy_cache image_cache;
            proxy_cache_key $remote_image_url;
            proxy_cache_valid 200 304 {{ cache_duration_ok | default('10m') }};
            proxy_cache_valid any {{ cache_duration_notok | default('2m') }};
            proxy_ignore_headers Set-Cookie Vary Cache-Control;
            proxy_hide_header Set-Cookie;

            proxy_cache_use_stale error timeout invalid_header updating
                                 http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_revalidate on;
            proxy_cache_lock on;

            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            proxy_set_header Host $proxy_host;
            proxy_set_header User-Agent "Mozilla/5.0 (compatible; nginx-cache/1.0)";

            proxy_intercept_errors on;

            add_header X-Cache-Status $upstream_cache_status;
            add_header X-Upstream-Status $upstream_status;
            add_header X-Remote-URL $remote_image_url;
        }

        location @serve_predownloaded {
            root /var/www/predownloaded_images;
            try_files $uri =404;

            add_header X-Served-From "predownloaded";
            add_header X-Cache-Status "FILESYSTEM_FALLBACK";
            add_header Cache-Control "public, max-age=21600"; # 6 hours
        }
    }
}